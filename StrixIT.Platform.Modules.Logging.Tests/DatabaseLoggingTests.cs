//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using StrixIT.Platform.Core;
using StrixIT.Platform.Core.Environment;
using StrixIT.Platform.Framework;
using System;
using System.IO;
using System.Linq;

namespace StrixIT.Platform.Modules.Logging.Tests
{
    [TestClass]
    public class DatabaseLoggingTests
    {
        #region Public Methods

        [TestMethod]
        public void WritingAnAnalyticsMessageToTheDatabaseShouldStoreAnAnalyticsMessage()
        {
            using (var source = new TestLoggingSource(new Configuration()))
            {
                var before = source.AnalyticsLogQuery().Count();
                var loggingService = GetLoggingService(source);
                loggingService.LogToAnalytics("Test", "AnalyticsTest");
                var after = source.AnalyticsLogQuery().Count();
                Assert.IsTrue(after == before + 1);
            }
        }

        [TestMethod]
        public void WritingAnAuditMessageToTheDatabaseShouldStoreAnAuditMessage()
        {
            using (var source = new TestLoggingSource(new Configuration()))
            {
                var before = source.AuditLogQuery().Count();
                var loggingService = GetLoggingService(source);
                loggingService.LogToAudit("Test", "AuditTest");
                var after = source.AuditLogQuery().Count();
                Assert.IsTrue(after == before + 1);
            }
        }

        [TestMethod]
        public void WritingAnErrorMessageToTheDatabaseShouldStoreAnErrorMessage()
        {
            using (var source = new TestLoggingSource(new Configuration()))
            {
                var before = source.ErrorLogQuery().Count();
                var loggingService = GetLoggingService(source);
                loggingService.Log("Test", LogLevel.Error);
                var after = source.ErrorLogQuery().Count();
                Assert.IsTrue(after == before + 1);
            }
        }

        #endregion Public Methods

        #region Private Methods

        private LoggingService GetLoggingService(TestLoggingSource source)
        {
            var environmentMock = new Mock<IEnvironment>();
            var membershipSettingsMock = new Mock<IMembershipSettings>();
            var userContextMock = new Mock<IUserContext>();
            userContextMock.Setup(u => u.GroupId).Returns(Guid.NewGuid());
            environmentMock.Setup(e => e.User).Returns(userContextMock.Object);
            environmentMock.Setup(e => e.MapPath(It.IsAny<string>())).Returns<string>(x => Path.Combine(Helpers.GetWorkingDirectory(), x));
            return new LoggingService(source, membershipSettingsMock.Object, environmentMock.Object);
        }

        #endregion Private Methods
    }
}