//------------------------------------------------------------------------------
// <auto-generated>
//     This code was not generated by a tool. but for stylecop suppression.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using StrixIT.Platform.Core;
using System;
using System.Linq;

namespace StrixIT.Platform.Modules.Logging.Tests
{
    [TestClass]
    public class DatabaseLoggingTests
    {
        [TestInitialize]
        public void Init()
        {
            ModuleManager.LoadConfigurations();
            StrixPlatform.ApplicationId = Guid.NewGuid();
            var userContext = new Mock<IUserContext>();
            userContext.Setup(u => u.GroupId).Returns(Guid.NewGuid());
            StrixPlatform.User = userContext.Object;
        }

        [TestCleanup]
        public void Tierdown()
        {
            StrixPlatform.ApplicationId = Guid.Empty;
            StrixPlatform.User = null;
        }

        [TestMethod]
        public void WritingAnErrorMessageToTheDatabaseShouldStoreAnErrorMessage()
        {
            using (var source = new TestLoggingSource())
            {
                var before = source.ErrorLogQuery().Count();
                var loggingService = new LoggingService(source);
                loggingService.Log("Test", LogLevel.Error);
                var after = source.ErrorLogQuery().Count();
                Assert.IsTrue(after == before + 1);
            }
        }

        [TestMethod]
        public void WritingAnAuditMessageToTheDatabaseShouldStoreAnAuditMessage()
        {
            using (var source = new TestLoggingSource())
            {
                var before = source.AuditLogQuery().Count();
                var loggingService = new LoggingService(source);
                loggingService.LogToAudit("Test", "AuditTest");
                var after = source.AuditLogQuery().Count();
                Assert.IsTrue(after == before + 1);
            }
        }

        [TestMethod]
        public void WritingAnAnalyticsMessageToTheDatabaseShouldStoreAnAnalyticsMessage()
        {
            using (var source = new TestLoggingSource())
            {
                var before = source.AnalyticsLogQuery().Count();
                var loggingService = new LoggingService(source);
                loggingService.LogToAnalytics("Test", "AnalyticsTest");
                var after = source.AnalyticsLogQuery().Count();
                Assert.IsTrue(after == before + 1);
            }
        }
    }
}
